import org.openhab.core.library.items.*
import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

var Timer timer = null


rule "Sun elevation control"
  when
    Item Elevation changed
  then
    var double elevation = new Double(Elevation.state.toString())
    if (elevation < -3.0) {
      sendCommand(gH_living_light, ON)
    } else {
      sendCommand(gH_living_light, OFF)
    }
end


rule "Corridor light timer"
  when
    Item gH_corridor_light received command
  then
    if (receivedCommand==ON) {
      if timer == null) {
        // First ON command, create a timer to turn the light off
        timer=createTimer(now.plusSeconds(60) [|
           sendCommand(gH_corridor_light,OFF)])
      } else {
        // Subsequent ON command, just "reset" the timer...
       timer.reschedule(now.plusSeconds(60))
      }
    } else if (receivedCommand==OFF) {
      // turn the light off and remove timer
      if (timer != null) {
        timer.cancel
        timer = null
      }
    }
  }
end


rule "Motion detected"
  when
    Item MS_motion changed to ON
  then
    sendCommand(gH_corridor_light, ON)
end


rule "No motion detected"
  when
    Item MS_motion changed to OFF
  then
    sendCommand(gH_corridor_light, OFF)
end


rule "Select Radio Station"
  when
    Item Radio_Station received command
  then
    switch(receivedCommand) {
      case 0 : playStream(null)
      case 1 : playStream("http://www.radioplay.se/nrj#")
      case 2 : playStream("http://play.rixfm.se/live")
      case 3 : playStream("http://www.radioplay.se/vinyl107#")
      case 4 : playStream("http://www.radioplay.se/rockklassiker#")
      case 5 : playStream("http://play.lugnafavoriter.com/live")
    }
end

rule "Volume control"
  when
    Item Volume received command
  then
    if(receivedCommand instanceof PercentType) {
      setMasterVolume(receivedCommand as PercentType)
    } else {
      if(receivedCommand==INCREASE) increaseMasterVolume(20)
      if(receivedCommand==DECREASE) decreaseMasterVolume(20)
    }
      postUpdate(Volume, masterVolume * 100)
end
